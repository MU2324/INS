"""
-------------------Ceasar_Cipher / Additive_Cipher----------------------

def encrypt(text,key):
    result =""
    
    
    
    for i in range(len(text)):
        char= text[i]
        
        if (char.isupper()):
            result += chr((ord(char) + key - 65) % 26 + 65)
            
        else:
            result += chr((ord(char) + key - 97)% 26 + 97)

    return result
    


def decrypt(cipher,key):
    result = ""
    
    for i in range(len(cipher)):
        char = cipher[i]
        
        if (char.isupper()):
            result += chr((ord(char) - key - 65) % 26 + 65)
            
        else:
            result += chr((ord(char) - key - 97)% 26 + 97)
    return result



text=input("Enter the text to encrypt : ")
key = int(input("Enter key: "))

print("Cipher text : ",encrypt(text, key))



cipher = input("Enter cipher text: ")
key1= int(input("Enter key: "))

print("Orginal: " ,decrypt(cipher, key))
    

----------------------Rail-Fence----------------------

s= input("Enter a string: ")
key = int(input("Enter key: "))

def railfence(txt):
    result=""
    
    for i in range(len(s)):
        if(i%key==0):
            result+=s[i]
    for i in range(len(s)):
        if(i%key!=0):
            result+=s[i]
    return result

print(railfence(s))
            
----------------------RSA--------------------------------

from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import binascii

private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend())


message = b"Hello, RSA!"

ciphertext = private_key.public_key().encrypt(
    message,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

print("Encrypted message:", binascii.hexlify(ciphertext).decode('utf-8'))

decrypted_message = private_key.decrypt(
    ciphertext,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

print("Decrypted message:", decrypted_message.decode('utf-8'))

-------------------MAC-----------------------

import hashlib
import hmac

def generate_mac(key, message):
    
    hash_function = hashlib.sha256

    mac = hmac.new(key, message.encode('utf-8'), hash_function).digest()
    return mac

def verify_mac(key, message, received_mac):
    hash_function = hashlib.sha256

    generated_mac = hmac.new(key, message.encode('utf-8'), hash_function).digest()

    return hmac.compare_digest(generated_mac, received_mac)

key = b'secret_key'
message = 'My name is Kunal '
mac = generate_mac(key, message)
print(f'Generated MAC: {mac.hex()}')
is_valid = verify_mac(key, message, mac)
print(f'MAC is valid: {is_valid}')

----------------DIFFE-HELLMAN------------------

from random import randint
if __name__ == '__main__':
            P = 23
            G = 9
print('The Value of P is :%d'%(P))
print('The Value of G is :%d'%(G))
a = 4
print('Secret Number for Alice is :%d'%(a))
x = int(pow(G,a,P))
b = 6
print('Secret Number for Bob is :%d'%(b))
y = int(pow(G,b,P))
ka = int(pow(y,a,P))
kb = int(pow(x,b,P))
print('Secret key for the Alice is : %d'%(ka))
print('Secret Key for the Bob is : %d'%(kb))

---------------MULTIPLICATIVE_CIPHER---------------


def encr(plain,k):
    return ''.join(chr((ord(char)- 65) * k % 26 +65)if char.isalpha() else char for char in plain.upper())

def decr(ciphertext,k):
    inverse_k = pow(k,-1,26)
    return ''.join(chr((ord(char) - 65) * inverse_k % 26 + 65)if char.isalpha() else char for char in ciphertext.upper())

plain="Hello"
k=3

encr_text = encr(plain, k)
print(encr_text)

decr_text = decr(encr_text, k)
print(decr_text)

"""